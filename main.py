import telebot
from telebot import types

TELEGRAM_TOKEN = "1390570516:AAHbm3RC99QsR-OXz7n8fFMinPERNn4mKGU"

bot = telebot.TeleBot(TELEGRAM_TOKEN)


# start
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    markup.add('/help', '/info')
    bot.send_message(message.chat.id, 'Hey!\nHow to use this bot? Choose /help'
                                      '\nInfo about this bot? Choose /info',
                                      reply_markup=markup)


# help
@bot.message_handler(commands=['help'])
def start_message(message):
    bot.send_message(message.chat.id, 'Hi! Enter the 3 numbers(settings) '
                                      'comma separated, the message '
                                      'and encrypt or decrypt(ex: 1,2,3 '
                                      'helloworld encrypt) to start.')


# info
@bot.message_handler(commands=['info'])
def help_message(message):
    bot.send_message(message.chat.id, 'Hello! This is cipher bot.\n'
                                      'This bot uses vigenere cipher. '
                                      'But in stead of key word, bot uses '
                                      'row of infinity pseudo-random numbers '
                                      'that generated by lemer\'s formula '
                                      'using 3 numbers(settings) that you '
                                      'agreed with your mate. Because of that '
                                      ',there is no way to decrypt this code '
                                      'if decrypter don\'t know the settings.')


@bot.message_handler(commands=['cipher'])
def send_welcome(message):
    msg = bot.reply_to(message, "Set three random numbers comma separated"
                                "\nEx: 1,2,3")
    bot.register_next_step_handler(msg, process_nums_step)


setch = []


def process_nums_step(message):
    nums = message.text
    setch.clear()
    setch.append(nums)
    msg = bot.reply_to(message, "Do you want to encrypt or "
                                "decrypt the message?")
    bot.register_next_step_handler(msg, process_method_step)


def process_method_step(message):
    method = message.text
    if method == "encrypt":
        setch.append(method)
        msg = bot.reply_to(message, "Send the message you want to encrypt")
        bot.register_next_step_handler(msg, process_message_step)
    elif method == "decrypt":
        setch.append(method)
        msg = bot.reply_to(message, "Send the message you want to decrypt")
        bot.register_next_step_handler(msg, process_message_step)
    else:
        bot.send_message(message.chat_id, "Wrong input. Please write"
                                          "'encrypt' or 'decrypt'")


def process_message_step(message):
    mes = message.text
    setch.append(mes)

    choice = setch[1].lower()
    nums = setch[0]
    nums = nums.split(',')
    mes = setch[2].lower()

    # settings_process
    num1 = []
    num2 = []
    a = len(mes) + 1
    d = int(nums[0])
    m = int(nums[1])
    m1 = int(nums[2])

    # numerate dict
    alph = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',
            'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
            'v', 'w', 'x', 'y', 'z']
    y = 0
    numerate = {}
    for i in alph:
        numerate[i] = y
        y = y + 1

    # numbers1 (of message) for both
    for i in mes:
        num1.append(numerate[i])

    # numbers2 (lemer pseudo-random key) + modulo 2 for both
    interim = []
    for i in range(1, a):
        def lemer(i, d, m, m1):
            if i == 1:
                return (d + i * m) % m1
            else:
                return (d + lemer(i - 1, d, m, m1) * m) % m1

        interim.append(lemer(i, d, m, m1))
    for i in interim:
        def modulo25(i):
            if i > -1 and i < 26:
                return i
            else:
                return modulo25(i - 25)

        num2.append(modulo25(i))

    # numbers3 (sum of num1 and num2) for encrypt
    num3 = []
    interim2 = []
    for i in range(len(num1)):
        x = num1[i] + num2[i]
        interim2.append(x)
    for i in interim2:
        num3.append(modulo25(i))

    # numbers3 for decrypt
    dnum3 = []
    interim3 = []
    for i in range(len(num1)):
        y = num1[i] - num2[i]
        interim3.append(y)
    for l in interim3:
        def minusmodulo(l):
            if l > -1:
                return l
            else:
                return minusmodulo(l + 25)

        dnum3.append(minusmodulo(l))

    # output cipher
    vrem = []
    gotov1 = ''
    gotov2 = ''
    for i in num3:
        vrem.append(alph[i])
    for k in vrem:
        gotov1 = gotov1 + k
    vrem.clear()
    for o in dnum3:
        vrem.append(alph[o])
    for p in vrem:
        gotov2 = gotov2 + p

    if choice == 'encrypt':
        bot.send_message(message.chat.id, gotov1)
    elif choice == 'decrypt':
        bot.send_message(message.chat.id, gotov2)


bot.polling()
